@using System.Text.RegularExpressions
@using DotNetNuke.Web.DDRMenu;
@using System.Dynamic;
@using DotNetNuke.Common;
@using DotNetNuke.Entities.Tabs;
@using DotNetNuke.Entities.Portals;
@inherits DotNetNuke.Web.Razor.DotNetNukeWebPage<dynamic>

@helper RenderNodes(IEnumerable<MenuNode> nodes, int level)
{
    if (nodes.Any())
    {
        var ulClasses = "";
        var topLevelId = level == 0 ? " id=" + Model.ControlID : string.Empty;
        if (level > 0) { ulClasses = "eng-nav-sub-list eng-nav-lower-level"; }
        if (level == 0) { ulClasses = "eng-nav-main-list eng-nav-current-level"; }

        <ul @topLevelId class="eng-nav-list @ulClasses">
            @{
        var i = -1;
        foreach (var node in nodes)
        {
            i++;
            var cssClasses = new List<string> { "eng-nav-item", (level == 0 ? "eng-nav-main-item" : "eng-nav-sub-item") };

            string nodeName = node.Text.ToLower();
            nodeName = Regex.Replace(nodeName, " ", "-");
            cssClasses.Add(nodeName);
            if (node.HasChildren()) { cssClasses.Add("eng-nav-dropdown"); }
            if (node.Selected) { cssClasses.Add("active"); }
            if ((i + 1) == nodes.Count())
            {
                cssClasses.Add("last");
            }

            var classes = new HtmlString((cssClasses.Count == 0) ? "" : (" class=\"" + string.Join(" ", cssClasses) + "\""));

            <li @classes>

                @if (node.HasChildren())
                {
                    <a class="eng-nav-node" href="@node.Url" target="@node.Target">
                        @node.Text
                    @*<strong class="caret"></strong>*@
                </a>
                    @RenderNodes(node.Children, level + 1)
                }
                else if (node.Enabled)
                {
                    <a class="eng-nav-node" href="@node.Url" target="@node.Target">@node.Text</a>
                }
                else
                {
                    <span class="eng-nav-node eng-disabled-nav-node">@node.Text</span>
                }
            </li>
        }

            }
        </ul>
    }
}

<nav id="engageMainNav">
    <button class="eng-nav-button">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
    </button>
    @RenderNodes(Model.Source.root.Children,0)
</nav>

